#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

#getting the number of divisors for given numbers
def divisor(num):
    import numpy as np
    count=2 #including 1 and number itself
    divisors=np.arange(2,num//2+1)
    total_list=num/divisors
    fraction,whole=np.modf(total_list)
    #print(total_list[fraction==0])
    count+=sum(total_list[fraction==0]>0)
    return count
#getting the divisors of the numbers from 0 to n
#def gettotalfactors()    
limit=500
#triangle=1
n=1
while True:
    triangle=n*(1+n)/2
    div=divisor(triangle)
    print("triangle_no:\t",triangle,"factorsnumber\t",div)
    if div>limit:
        print("over five hundred\t",triangle)
        break
    n+=1
    
# for i in range(20):
#     if i%5==0:print()
#     print(i*(1+i)/2,sep="\t",end='\t')
  #Answer:   76576500
